#+OPTIONS: num:t todo:nil tasks:nil
#+OPTIONS: toc:nil
#+OPTIONS: H:4
#+TITLE: Analysis of all seasons AFL data
#+AUTHOR: Stephen E Lane

#+HTML_MATHJAX: align: left tagindent: 5em tagside: right font: Neo-Euler

#+TOC: headlines 2

* Introduction

So in [[file:season2001.org][season 2001]] I looked at a function to optimise the home ground advantage and smoothing parameter for a very simple Elo-style ratings system. Now, it'd be much more interesting if I could do this over all seasons.

Now let's look at the 2001 data:

#+BEGIN_SRC R :session :exports both :results output
  library(dplyr)
  library(optimx)
  ## Load all data in
  load("../data-raw/all-seasons.rda")
  ## Remove 2016
  allSeasons <- allSeasons[-16]
#+END_SRC

* Optimising over all the data

I have an optimising function from [[file:season2001.org][season 2001]] so I just need to fiddle with that. What's a good prototype/pseudocode for this? How about:

- read in 2001
- start everyone off with the same ratings
- run through the season to get final ratings
- store the aggregated error

OK now, I need to repeat the following for each season:

- use the final ratings for season $t-1$ as the start ratings for season $t$
  - at some later stage, I'll use shrinkage to bring these back in line
- load in season $t$ data
- run through the season and get the final ratings
- store the aggregated error

That looks good? Let's give it a shot.

#+BEGIN_SRC R :session :exports both :results output
  ## This is the same function as previously
  calcEloOpt <- function(rndData, oldRating, pars){
      rndData <- rndData %>%
          mutate(
              rOldHome = with(oldRating %>%
                              filter(team %in% rndData$teamNameHome),
                              rating),
              rOldAway = with(oldRating %>%
                              filter(team %in% rndData$teamNameAway),
                              rating),
              diffExpHome = rOldHome - rOldAway + exp(pars[2]),
              diffExpAway = -diffExpHome,
              diffHome = pointsHome - pointsAway,
              diffAway = -diffHome,
              rChange = exp(pars[1]) * (diffHome - diffExpHome),
              rNewHome = rOldHome + rChange,
              rNewAway = rOldAway - rChange,
              error = diffHome - diffExpHome
          )
      ## Then put back into a stacked (tidy) data frame.
      nextRating <- with(rndData,
                         data_frame(round = rep(round, 2),
                                    team = c(teamNameHome, teamNameAway),
                                    rating = c(rNewHome, rNewAway)))
      list(nextRating = nextRating, sqError = sum(rndData$error^2),
           absError = sum(abs(rndData$error)))
  }

  ## This is a similar function to the previous optFun, but returns the sum of
  ## errors (not mean) and also expects the raw parameters (as we have another
  ## wrapper function).
  seasonFun <- function(data, initialRating, pars, system){
      currentRatings <- initialRating
      oldRating <- currentRatings
      absErrors <- sqErrors <- array(NA, max(data$round))
      for(i in seq_len(max(data$round))){
          rnd <- data %>% filter(round == i)
          newRating <- switch(
              system,
              simpElo = calcEloOpt(rnd, oldRating = oldRating, pars = pars)
          )
          oldRating <- left_join(oldRating %>%
                                 select(team, oldRating = rating,
                                        oldRound = round),
                                 newRating$nextRating, by = "team") %>%
              mutate(rating = ifelse(is.na(rating), oldRating, rating),
                     round = ifelse(is.na(round), oldRound, round)) %>%
              select(-oldRating, -oldRound)
          currentRatings <- bind_rows(currentRatings, newRating$nextRating)
          absErrors[i] <- newRating$absError
          sqErrors[i] <- newRating$sqError
      }
      list(error = sum(sqErrors), finalRating = oldRating)
  }

  ## This is where we now optimise
  optFun <- function(pars, allSeasons, system){
      currentRatings <- data_frame(
          team = c(unique(allSeasons[[1]]$teamNameHome), "GWS Giants",
                   "Gold Coast Suns"), rating = 1000, round = 0
      )
      error <- 0
      nGames <- 0
      ## Need to reset round to zero.
      for(i in seq_len(length(allSeasons))){
          seasonResults <- seasonFun(allSeasons[[i]], currentRatings, pars = pars,
                                     system = system)
          error <- error + seasonResults$error
          nGames <- nGames + nrow(allSeasons[[i]])
          currentRatings <- seasonResults$finalRating
          currentRatings$round <- 0
      }
      error/nGames
  }
#+END_SRC

** Run the optimisation

This is going to take a while...

#+BEGIN_SRC R :exports both :results output
  aflOpt <- optimx(c(runif(1, log(0.0001), 0), runif(1, 0, 5)), optFun,
                   method = "L-BFGS-B", lower = rep(log(0.0001), 2),
                   upper = c(0, log(50)),  allSeasons = allSeasons,
                   system = "simpElo")
#+END_SRC

Problem is, it sets $K=0.001$ and $H = 8.015929$. $K$ is way too small. This is likely due to my dodgy Elo rating though!
